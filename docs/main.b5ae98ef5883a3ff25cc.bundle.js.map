{"version":3,"file":"main.b5ae98ef5883a3ff25cc.bundle.js","sources":["webpack:///./src/components/ImageCycle.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport styled from \"styled-components\";\r\nimport { useTransition, animated } from \"react-spring\";\r\nimport { useInterval } from \"../useInterval\";\r\n\r\n/**\r\n * ImageCycle.js - Returns an infinite cycle of images, that can animate if you like.\r\n *\r\n * @param {number} interval - The interval at which the images update.\r\n * @param {bool} animate - Defines if the components should animate.\r\n * @param {bool} forceFetch - Defines if the images should be fetched from server each time.\r\n * @param {array} images - The array of images to display.\r\n */\r\nconst ImageCycle = ({ interval, animate, forceFetch, images }) => {\r\n  /**\r\n   * Define index to hold a reference to the currently displayed image.\r\n   */\r\n  const [index, setIndex] = useState(0);\r\n\r\n  /**\r\n   * Update the index over time.\r\n   */\r\n  useInterval(() => {\r\n    setIndex((index + 1) % images.length);\r\n  }, interval);\r\n\r\n  /**\r\n   * Define the initial animations. Start small and transparent, then full-size and opaque.\r\n   * Will not animate if `animate` is false.\r\n   */\r\n  const transitions = useTransition(images[index], images[index].id, {\r\n    from: { opacity: 0, transform: \"scale(0.8)\" },\r\n    enter: { opacity: 1, transform: \" scale(1)\" },\r\n    leave: { opacity: 0, transform: \" scale(0.8)\" },\r\n    config: { mass: 1, tension: 230, friction: 21 },\r\n    immediate: !animate\r\n  });\r\n\r\n  return transitions.map(({ item, props, key }) => (\r\n    <Image\r\n      key={key}\r\n      style={{\r\n        ...props,\r\n        backgroundImage: `url('${item.url +\r\n          (forceFetch ? \"?force_fetch=\" + Date.now() : \"\")}')`\r\n      }}\r\n    />\r\n  ));\r\n};\r\n\r\nImageCycle.propTypes = {\r\n  interval: PropTypes.number.isRequired,\r\n  animate: PropTypes.bool.isRequired,\r\n  forceFetch: PropTypes.bool,\r\n  images: PropTypes.arrayOf(\r\n    PropTypes.shape({ id: PropTypes.string, url: PropTypes.string }).isRequired\r\n  ).isRequired\r\n};\r\n\r\nImageCycle.defaultProps = {\r\n  forceFetch: false\r\n};\r\n\r\nexport default ImageCycle;\r\n\r\n/**\r\n *  Define image styled. Images is a background of a div, so dynamic sizing can be acheived.\r\n */\r\nconst Image = styled(animated.div)`\r\n  width: 100%;\r\n  height: 100%;\r\n  position: absolute;\r\n\r\n  background-repeat: no-repeat;\r\n  background-size: contain;\r\n  background-position: center;\r\n`;\r\n"],"mappings":"AAcA","sourceRoot":""}